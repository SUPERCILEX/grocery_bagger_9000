name: CI/CD

on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2022-05-11
          default: true
      - name: Cargo Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - name: Build project
        run: cargo build --release --all-features

  build_web:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2022-05-11
          target: wasm32-unknown-unknown
          default: true
      - name: Cargo Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - name: Build project
        run: cargo build --release --all-features --target wasm32-unknown-unknown

  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2022-05-11
          default: true
      - name: Cargo Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - name: Run tests
        run: cargo test

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2022-05-11
          default: true
          components: rustfmt, clippy
      - name: Cargo Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - name: Run lint
        run: |
          cargo fmt --check
          cargo clippy --all-targets --all-features -- -D warnings \
            -W clippy::all \
            -W clippy::float_cmp_const \
            -W clippy::empty_structs_with_brackets \
            -W clippy::pedantic \
            -W clippy::nursery \
            -W clippy::cargo

  deploy_release:
    needs: [build, test, lint]
    runs-on: ubuntu-latest
#    if: startsWith(github.ref, 'refs/tags/')
    if: false
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2022-05-11
          default: true
      - name: Publish release
        run: cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  deploy_web:
    needs: [build_web, test, lint]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2022-05-11
          target: wasm32-unknown-unknown
          default: true
      - name: Publish website
        run: |
          cargo install wasm-bindgen-cli
          curl -L https://github.com/WebAssembly/binaryen/releases/download/version_108/binaryen-version_108-x86_64-linux.tar.gz -o opt.tar.gz && \
            tar -xvf opt.tar.gz
          git init web-build && \
            git config --global user.name "${GITHUB_ACTOR}" && \
            git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"

          cargo build --locked --profile=web-release --target=wasm32-unknown-unknown
          wasm-bindgen --out-dir out --target web target/wasm32-unknown-unknown/web-release/grocery_bagger_9000.wasm
          cp -r web/* assets/ web-build
          mv out/grocery_bagger_9000.js web-build
          ./binaryen-version_108/bin/wasm-opt -O -ol 100 -s 100 out/grocery_bagger_9000_bg.wasm -o web-build/grocery_bagger_9000_bg.wasm

          cd web-build
          git add . && \
            git commit -m "Build for ${GITHUB_SHA}" && \
            git push --force "https://${GH_PAT}@github.com/${GITHUB_REPOSITORY}.git" master:gh-pages
        env:
          GH_PAT: ${{ secrets.GH_PAT }}

  attach_binaries:
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: x86_64-apple-darwin
            os: macos-latest
    needs: [build, test, lint]
    runs-on: ${{ matrix.os }}
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2022-05-11
          target: ${{ matrix.target }}
          default: true
      - name: Build binary
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --locked --target=${{ matrix.target }}
      - name: Zip game
        if: matrix.os != 'windows-latest'
        run: |
          mv target/${{ matrix.target }}/release/grocery_bagger_9000 .
          zip -r grocery_bagger_9000.zip assets/ grocery_bagger_9000
      - name: Zip game
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          mv target/${{ matrix.target }}/release/grocery_bagger_9000.exe .
          7z a grocery_bagger_9000.zip assets/ grocery_bagger_9000.exe
      - name: Upload binary
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GH_PAT }}
          file: grocery_bagger_9000.zip
          asset_name: grocery_bagger_9000-${{ matrix.target }}.zip
          tag: ${{ github.ref }}
